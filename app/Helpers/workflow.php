<?php

use App\Models\Setting;
use Illuminate\Support\Facades\DB;


if (!function_exists('get_workflow_types')) {

    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return
     */
    function get_workflow_types()
    {
       return collect(\App\Models\Workflow\WorkflowType::orderBy('sort_order', 'desc')->get())->map(function($d){
        $d->count = get_request_details_count($d->id);
         return $d;
        });
    }
}

if (!function_exists('get_request_details_count')) {

    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return
     */
    function get_request_details_count($workflow_type_id)
    {
        return \App\Models\Workflow\WorkflowRequestDetail::whereHas('workflow', function ($query) use($workflow_type_id) {
            return $query->where('workflow_type_id', '=', $workflow_type_id);
        })
        ->join('workflow_requests as b','workflow_request_details.workflow_request_id','b.id')
        ->where('workflow_request_details.status',"PENDING")
        ->where('b.status',"PENDING")
                        ->where( function($q){
                            $q->where('workflow_request_details.implementor_id',user()->id)
                              ->orWhere('workflow_request_details.old_implementor_id',user()->id);
                          })
                        ->get()
                        ->count();
    }
}

/*
 * Global helpers file with misc functions.
 */
if (!function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (!function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (!function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}


if (!function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory . $filename)) {
                array_push($directory_list, $directory . $filename . '/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory . '*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (!function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path) . '/' . $filename . '.rtl.css';
    }
}

if (!function_exists('escapeSlashes')) {
    /**
     * Access the escapeSlashes helper.
     */
    function escapeSlashes($path)
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
        $path = str_replace('//', DIRECTORY_SEPARATOR, $path);
        $path = trim($path, DIRECTORY_SEPARATOR);

        return $path;
    }
}

if (!function_exists('getRouteUrl')) {
    /**
     * Converts querystring params to array and use it as route params and returns URL.
     * @param $url
     * @param string $url_type
     * @param string $separator
     * @return string
     */
    function getRouteUrl($url, $url_type = 'route', $separator = '?')
    {
        $routeUrl = '';
        if (!empty($url)) {
            if ($url_type == 'route') {
                if (strpos($url, $separator) !== false) {
                    $urlArray = explode($separator, $url);
                    $url = $urlArray[0];
                    parse_str($urlArray[1], $params);
                    $routeUrl = route($url, $params);
                } else {
                    $routeUrl = route($url);
                }
            } else {
                $routeUrl = $url;
            }
        }

        return $routeUrl;
    }
}

if (!function_exists('renderMenuItems')) {
    /**
     * render sidebar menu items after permission check.
     * @param $items
     * @param string $viewName
     */
    function renderMenuItems($items, $viewName = 'backend.includes.partials.sidebar-item')
    {
        foreach ($items as $item) {
            // if(!empty($item->url) && !Route::has($item->url)) {
            //     return;
            // }
            if (!empty($item->view_permission_id)) {
                if (access()->allow($item->view_permission_id)) {
                    echo view($viewName, compact('item'));
                }
            } else {
                echo view($viewName, compact('item'));
            }
        }
    }
}

if (!function_exists('checkDatabaseConnection')) {

    /**
     * @return bool
     */
    function checkDatabaseConnection()
    {
        try {
            DB::connection()->reconnect();

            return true;
        } catch (Exception $ex) {
            return false;
        }
    }
}

if (!function_exists('currencyFormat')) {

    /**
     * @param $number
     * @param bool $symbol
     * @return bool
     */
    function currencyFormat($number, $symbol = true)
    {
        $number = number_format($number, '2', '.', ',');
        if($symbol)
            return currency().' '.$number;
        return $number;
    }
}

if (!function_exists('numberClean')) {

    /**
     * @param $number
     * @return bool
     */
    function numberClean($number)
    {
        $precision_point = config('currency.precision_point');
        $decimal_sep = config('currency.decimal_sep');
        $thousand_sep = config('currency.thousand_sep');
        $number = str_replace($thousand_sep, "", $number);
        $number = str_replace($decimal_sep, ".", $number);
        $format = '%.' . $precision_point . 'f';
        $number = sprintf($format, $number);
        return $number;
    }
}
