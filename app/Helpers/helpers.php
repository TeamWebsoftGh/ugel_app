<?php

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;

/**
 * Henerate UUID.
 *
 * @return uuid
 */
function generateUuid()
{
    return uuid::uuid4();
}

if (!function_exists('homeRoute')) {

    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }
}

/*
 * Global helpers file with misc functions.
 */
if (!function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (!function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (!function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

function generateResponse($intent)
{
    switch ($intent->status) {
        case "requires_action":
        case "requires_source_action":
            // Card requires authentication
            return [
                'requiresAction' => true,
                'paymentIntentId' => $intent->id,
                'clientSecret' => $intent->client_secret
            ];
        case "requires_payment_method":
        case "requires_source":
            // Card was not properly authenticated, suggest a new payment method
            return [
                'error' => "Your card was denied, please provide a new payment method"
            ];
        case "succeeded":
            // Payment is complete, authentication not required
            // To cancel the payment after capture you will need to issue a Refund (https://stripe.com/docs/api/refunds)
            return ['clientSecret' => $intent->client_secret];
    }
}

if (!function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory . $filename)) {
                array_push($directory_list, $directory . $filename . '/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory . '*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (!function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path) . '/' . $filename . '.rtl.css';
    }
}

if (!function_exists('escapeSlashes')) {
    /**
     * Access the escapeSlashes helper.
     */
    function escapeSlashes($path)
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
        $path = str_replace('//', DIRECTORY_SEPARATOR, $path);
        $path = trim($path, DIRECTORY_SEPARATOR);

        return $path;
    }
}

if (!function_exists('getRouteUrl')) {
    /**
     * Converts querystring params to array and use it as route params and returns URL.
     * @param $url
     * @param string $url_type
     * @param string $separator
     * @return string
     */
    function getRouteUrl($url, $url_type = 'route', $separator = '?')
    {
        $routeUrl = '';
        if (!empty($url)) {
            if ($url_type == 'route') {
                if (strpos($url, $separator) !== false) {
                    $urlArray = explode($separator, $url);
                    $url = $urlArray[0];
                    parse_str($urlArray[1], $params);
                    $routeUrl = route($url, $params);
                } else {
                    $routeUrl = route($url);
                }
            } else {
                $routeUrl = $url;
            }
        }

        return $routeUrl;
    }
}

if (!function_exists('renderMenuItems')) {
    /**
     * render sidebar menu items after permission check.
     * @param $items
     * @param string $viewName
     */
    function renderMenuItems($items, $viewName = 'backend.includes.partials.sidebar-item')
    {
        foreach ($items as $item) {
            // if(!empty($item->url) && !Route::has($item->url)) {
            //     return;
            // }
            if (!empty($item->view_permission_id)) {
                if (access()->allow($item->view_permission_id)) {
                    echo view($viewName, compact('item'));
                }
            } else {
                echo view($viewName, compact('item'));
            }
        }
    }
}

if (!function_exists('checkDatabaseConnection')) {

    /**
     * @return bool
     */
    function checkDatabaseConnection()
    {
        try {
            DB::connection()->reconnect();

            return true;
        } catch (Exception $ex) {
            return false;
        }
    }
}

if (!function_exists('currencyFormat')) {

    /**
     * @param $number
     * @param bool $symbol
     * @return bool
     */
    function currencyFormat($number, $symbol = true)
    {
        $number = number_format($number, '2', '.', ',');
        if($symbol)
            return currency().' '.$number;
        return $number;
    }
}

if (!function_exists('numberClean')) {

    /**
     * @param $number
     * @return bool
     */
    function numberClean($number)
    {
        $precision_point = config('currency.precision_point');
        $decimal_sep = config('currency.decimal_sep');
        $thousand_sep = config('currency.thousand_sep');
        $number = str_replace($thousand_sep, "", $number);
        $number = str_replace($decimal_sep, ".", $number);
        $format = '%.' . $precision_point . 'f';
        $number = sprintf($format, $number);
        return $number;
    }
}
function date_for_database($input)
{
    $timestamp = strtotime($input);
   if($timestamp) {
       $date = new DateTime($input);
       //$date->modify('+1 day');
       $date = $date->format('Y-m-d');
       return $date;
   }
   else return null;
}

function datetime_for_database($input, $c = true)
{
    $date = new DateTime($input);
    if ($c) $date->modify('+1 day');
    $date = $date->format('Y-m-d H:i:s');
    return $date;
}

function dateFormat($date = '', $local = false)
{
    if ($local AND strtotime($date)) return date($local, strtotime($date));
    if (strtotime($date)) return date(config('core.main_date_format'), strtotime($date));
    return date(config('core.main_date_format'));
}


function dateTimeFormat($date = '', $local = false)
{
    if ($local) return date($local, strtotime($date));
    if ($date) return date(config('core.main_date_format') . ' H:i:s', strtotime($date));
}

function timeFormat($date = '')
{
    if ($date) return date('H:i:s', strtotime($date));
}


function token_validator($request_token, $data, $return_token = false)
{

    $valid_token = hash_hmac('ripemd160', $data, config('master.key'));
    if ($return_token) return $valid_token;
    if (hash_equals($request_token, $valid_token)) return true;
    return false;

}

function form_return($input)
{
    if (isset($input)) return $input;
    return null;
}

function delete_file($file)
{
    \Illuminate\Support\Facades\Storage::delete($file);
    @unlink(storage_path('app' . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR . $file));
    return true;
}

function parse($template, $data, $return = FALSE)
{
    if ($template === '') {
        return FALSE;
    }

    $replace = array();
    foreach ($data as $key => $val) {
        $replace = array_merge(
            $replace,
            is_array($val)
                ? parse_pair($key, $val, $template)
                : parse_single($key, (string)$val, $template)
        );
    }

    unset($data);
    $template = strtr($template, $replace);


    return $template;
}

function parse_single($key, $val, $string)
{
    return array('{' . $key . '}' => (string)$val);
}

function parse_pair($variable, $data, $string)
{
    $replace = array();
    preg_match_all(
        '#' . preg_quote('{' . $variable . '}') . '(.+?)' . preg_quote('{' . '/' . $variable . '}') . '#s',
        $string,
        $matches,
        PREG_SET_ORDER
    );

    foreach ($matches as $match) {
        $str = '';
        foreach ($data as $row) {
            $temp = array();
            foreach ($row as $key => $val) {
                if (is_array($val)) {
                    $pair = parse_pair($key, $val, $match[1]);
                    if (!empty($pair)) {
                        $temp = array_merge($temp, $pair);
                    }

                    continue;
                }

                $temp['{' . $key . '}'] = $val;
            }

            $str .= strtr($match[1], $temp);
        }

        $replace[$match[0]] = $str;
    }

    return $replace;
}

function in_array_r($needle, $haystack, $strict = false, $columns = null)
{
    foreach ($haystack as $item) {
        if (($strict ? $item === $needle : @$item['permission_id'] == $needle) || (is_array($item) && in_array_r($needle, $item, $strict))) {
            return true;
        }
    }

    return false;
}

function strip_tags_deep($value, $key = null){
  if(is_array($value)){
    return array_map('strip_tags_deep', $value, array_keys($value));
  }else{
    if($key === 'valuetest'){
      return strip_tags($value);
    }
    return $value;
  }
}

if (!function_exists('format_storage_link')) {
    /**
     * @param $filename
     * @param string $prefix
     * @param string $alt
     * @return string
     */
    function format_storage_link($filename, $prefix = '', $alt = "default")
    {
        if($alt = "default")
        {
            return asset("storage/" .$prefix . $filename);
        }else{
            return Storage::disk('public')->url('app/public/img/company/' . config('core.logo'));
        }
    }
}
